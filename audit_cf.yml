AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LambdaName:
    Description: Name of the lambda
    Type: String
    Default: CustomControlTower-Config-Notification
    MinLength: '1'
    MaxLength: '255'
  Company:
    Description: Name of the company
    Type: String
    MinLength: '1'
    MaxLength: '255'
  MoreInfo:
    Description: URL of the company cloud policy
    Type: String
    MinLength: '1'
    MaxLength: '255'
  SrcLogo:
    Description: URL of the company logo
    Type: String
    MinLength: '1'
    MaxLength: '255'
  MasterRoleARN:
    Description: ARN of the Admin Role to assume
    Type: String
    MinLength: '1'
    MaxLength: '255'
  SESConfigurationSet:
    Description: Name of the SES configuration SET
    Type: String
    MinLength: '1'
    MaxLength: '255'
  SESEmailReplyTo:
    Description: Email configured for reply-to
    Type: String
    MinLength: '1'
    MaxLength: '255'
  SESEmailSender:
    Description: Email configured as sender
    Type: String
    MinLength: '1'
    MaxLength: '255'
  SESTemplateName:
    Description: Name of the SES Template
    Type: String
    MinLength: '1'
    MaxLength: '255'
  SourceBucket:
    Description: Name of the S3 bucket that you have stored the lambda zip files in.
    Type: String
    MinLength: '1'
    MaxLength: '255'
  SourcePath:
    Description: Key in the S3 bucket where you have stored the rule zip files.
    Type: String
    MinLength: '1'
    MaxLength: '255'
  Description:
    Description: Description of the Rule
    Type: String
    MinLength: '1'
    MaxLength: '255'
    Default: Lambda to send email when config rule is triggered.
Resources:
  rdkRuleCodeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Join:
        - ''
        - - Ref: LambdaName
          - '-function'
      Code:
        S3Bucket:
          Ref: SourceBucket
        S3Key:
          Ref: SourcePath
      Description: 
        Fn::Join:
        - ''
        - - 'Lambda supporting the Rule for ' 
          - Ref: Description
      Handler: notify.lambda_handler
      MemorySize: '256'
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: 'python3.8'
      Timeout: 120
      Environment:
        Variables:
          COMPANY:
            Ref: Company
          DYNAMODB_TABLE: 
            Ref: ConfigTableDynamoDB
          MASTER_ROLE_ARN:
            Ref: MasterRoleARN
          MORE_INFO:
            Ref: MoreInfo
          SES_CONFIGURATION_SET:
            Ref: SESConfigurationSet
          SES_EMAIL_REPLY_TO:
            Ref: SESEmailReplyTo
          SES_EMAIL_SENDER:
            Ref: SESEmailSender
          SES_TEMPLATE_NAME:
            Ref: SESTemplateName
          SRC_LOGO: 
           Ref: SrcLogo
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
           - Effect: Allow
             Principal:
                Service: lambda.amazonaws.com
             Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyName: DDBAccessRoleAndSes
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: 
                - dynamodb:DescribeTable
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
              Resource: 
                - "Fn::GetAtt": [ ConfigTableDynamoDB, Arn ]
            - Effect: Allow
              Action:
                - ses:Send*
              Resource:
                -  "*"
  LambdaRoleInit:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
           - Effect: Allow
             Principal:
                Service: lambda.amazonaws.com
             Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: 
                - "Fn::GetAtt": [ ConfigTableDynamoDB, Arn ]
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const response = require("cfn-response");
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context) {
              console.log(JSON.stringify(event,null,2));
              var params = {
                TableName: event.ResourceProperties.DynamoTableName,
                Item:{
                    "id": "default_config",
                    "primary_owner": "None",
                    "notification_enabled": false,
                    "escalation_enabled": false,
                    "escalate_after": 24,
                    "group_owner": "None",
                    "escalate_contact1": "None",
                    "escalate_contact2": "None"
                }
            };
          docClient.put(params, function(err, data) { if (err) {
            response.send(event, context, "FAILED", {});
          } else {
            response.send(event, context, "SUCCESS", {});
          }
          });
          };
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRoleInit , "Arn" ]
      Runtime: nodejs12.x
      Timeout: 60
  ConfigTableDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  InitializeDynamoDB:
    Type: Custom::InitFunction
    DependsOn: ConfigTableDynamoDB
    Properties:
      ServiceToken:
         Fn::GetAtt: [ InitFunction , "Arn" ]
      DynamoTableName:
        Ref: ConfigTableDynamoDB
